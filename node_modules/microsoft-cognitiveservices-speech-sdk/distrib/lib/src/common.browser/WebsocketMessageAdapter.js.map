{"version":3,"sources":["src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"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","file":"WebsocketMessageAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport * as http from \"http\";\r\nimport * as HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as tls from \"tls\";\r\nimport * as ws from \"ws\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<boolean>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<boolean>;\r\n    private privDisconnectDeferral: Deferred<boolean>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return PromiseHelper.fromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise();\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<boolean>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve(true);\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                if (this.proxyInfo !== undefined &&\r\n                    this.proxyInfo.HostName !== undefined &&\r\n                    this.proxyInfo.Port > 0) {\r\n                    const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n                        host: this.proxyInfo.HostName,\r\n                        port: this.proxyInfo.Port,\r\n                    };\r\n\r\n                    if (undefined !== this.proxyInfo.UserName) {\r\n                        httpProxyOptions.headers = {\r\n                            \"Proxy-Authentication\": \"Basic \" + new Buffer(this.proxyInfo.UserName + \":\" + (this.proxyInfo.Password === undefined) ? \"\" : this.proxyInfo.Password).toString(\"base64\"),\r\n                            \"requestOCSP\": \"true\",\r\n                        };\r\n                    }\r\n\r\n                    const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n                    const httpsOptions: http.RequestOptions = { agent: httpProxyAgent };\r\n\r\n                    this.privWebsocketClient = new ws(this.privUri, httpsOptions as ws.ClientOptions);\r\n\r\n                    // Register to be notified when WebSocket upgrade happens so we can check the validity of the\r\n                    // Certificate.\r\n                    this.privWebsocketClient.addListener(\"upgrade\", (e: http.IncomingMessage): void => {\r\n                        const tlsSocket: tls.TLSSocket = e.socket as tls.TLSSocket;\r\n                        const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n\r\n                        // Cork the socket until we know if the cert is good.\r\n                        tlsSocket.cork();\r\n\r\n                        ocsp.check({\r\n                            cert: peer.raw,\r\n                            httpOptions: httpsOptions,\r\n                            issuer: peer.issuerCertificate.raw,\r\n                        }, (error: Error, res: any): void => {\r\n                            if (error) {\r\n                                this.privCertificateValidatedDeferral.reject(error.message);\r\n                                tlsSocket.destroy(error);\r\n                            } else {\r\n                                this.privCertificateValidatedDeferral.resolve(true);\r\n                                tlsSocket.uncork();\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                } else {\r\n                    // The ocsp library will handle validation for us and fail the connection if needed.\r\n                    this.privCertificateValidatedDeferral.resolve(true);\r\n\r\n                    const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n                    const options: ws.ClientOptions = { agent: ocspAgent };\r\n                    this.privWebsocketClient = new ws(this.privUri, options);\r\n                }\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<boolean>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue();\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise();\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise().on((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            // TODO: Understand what this is error is. Will we still get onClose ?\r\n            if (this.privConnectionState !== ConnectionState.Connecting) {\r\n                // TODO: Is this required ?\r\n                // this.onEvent(new ConnectionErrorEvent(errorMsg, connectionId));\r\n            }\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason));\r\n            } else {\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason);\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise());\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .on((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .on((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise();\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<boolean> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.fromError<boolean>(`Cannot send on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<boolean>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise());\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .on((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise();\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.fromError<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<boolean> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            const deferral = new Deferred<boolean>();\r\n            deferral.resolve(true);\r\n            return deferral.promise();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return PromiseHelper.fromResult(true);\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n            this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            return PromiseHelper.fromResult(true);\r\n        } catch (e) {\r\n            return PromiseHelper.fromError<boolean>(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private onClose = (code: number, reason: string): void => {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve(true);\r\n        this.privReceivingMessageQueue.dispose(reason);\r\n        this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private processSendQueue = (): void => {\r\n        this.privSendMessageQueue\r\n            .dequeue()\r\n            .on((sendItem: ISendItem) => {\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!sendItem) {\r\n                    return;\r\n                }\r\n\r\n                this.sendRawMessage(sendItem)\r\n                    .on((result: boolean) => {\r\n                        sendItem.sendStatusDeferral.resolve(result);\r\n                        this.processSendQueue();\r\n                    }, (sendError: string) => {\r\n                        sendItem.sendStatusDeferral.reject(sendError);\r\n                        this.processSendQueue();\r\n                    });\r\n            }, (error: string) => {\r\n                // do nothing\r\n            });\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]}