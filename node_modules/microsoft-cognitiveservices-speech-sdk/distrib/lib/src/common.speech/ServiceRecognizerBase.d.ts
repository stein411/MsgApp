import { ConnectionEvent, EventSource, IAudioSource, IDisposable, Promise } from "../common/Exports";
import { CancellationErrorCode, CancellationReason, Recognizer, SpeechRecognitionResult } from "../sdk/Exports";
import { DynamicGrammarBuilder, RecognitionMode, RequestSession, SpeechContext } from "./Exports";
import { IAuthentication } from "./IAuthentication";
import { IConnectionFactory } from "./IConnectionFactory";
import { RecognizerConfig } from "./RecognizerConfig";
import { SpeechConnectionMessage } from "./SpeechConnectionMessage.Internal";
export declare abstract class ServiceRecognizerBase implements IDisposable {
    private privAuthentication;
    private privConnectionFactory;
    private privAudioSource;
    private privSpeechServiceConfigConnectionId;
    private privConnectionConfigurationPromise;
    private privConnectionPromise;
    private privConnectionId;
    private privAuthFetchEventId;
    private privIsDisposed;
    private privRecognizer;
    private privMustReportEndOfStream;
    private privConnectionEvents;
    private privSpeechContext;
    private privDynamicGrammar;
    protected privRequestSession: RequestSession;
    protected privRecognizerConfig: RecognizerConfig;
    constructor(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioSource: IAudioSource, recognizerConfig: RecognizerConfig, recognizer: Recognizer);
    readonly audioSource: IAudioSource;
    readonly speechContext: SpeechContext;
    readonly dynamicGrammar: DynamicGrammarBuilder;
    isDisposed(): boolean;
    dispose(reason?: string): void;
    readonly connectionEvents: EventSource<ConnectionEvent>;
    readonly recognitionMode: RecognitionMode;
    recognize(recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallBack: (e: string) => void): Promise<boolean>;
    stopRecognizing(): void;
    connect(): void;
    disconnect(): void;
    static telemetryData: (json: string) => void;
    static telemetryDataEnabled: boolean;
    protected abstract processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage, successCallback?: (e: SpeechRecognitionResult) => void, errorCallBack?: (e: string) => void): void;
    protected sendTelemetryData: () => Promise<boolean> | Promise<Promise<boolean>>;
    protected abstract cancelRecognition(sessionId: string, requestId: string, cancellationReason: CancellationReason, errorCode: CancellationErrorCode, error: string, cancelRecoCallback: (r: SpeechRecognitionResult) => void): void;
    protected cancelRecognitionLocal(cancellationReason: CancellationReason, errorCode: CancellationErrorCode, error: string, cancelRecoCallback: (r: SpeechRecognitionResult) => void): void;
    private fetchConnection;
    private connectImpl;
    private configureConnection;
    private receiveMessage;
    private sendSpeechServiceConfig;
    private sendSpeechContext;
    private sendFinalAudio;
    private sendAudio;
}
