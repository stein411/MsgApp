{"version":3,"sources":["src/common/Queue.ts"],"names":[],"mappings":"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","file":"Queue.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\r\n\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded(this.drain));\r\n    }\r\n\r\n    public enqueue = (item: TItem): void => {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(PromiseHelper.fromResult(item));\r\n    }\r\n\r\n    public enqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.throwIfDispose();\r\n        this.privPromiseStore.add(promise);\r\n        promise.finally(() => {\r\n            while (this.privPromiseStore.length() > 0) {\r\n                if (!this.privPromiseStore.first().result().isCompleted) {\r\n                    break;\r\n                } else {\r\n                    const p = this.privPromiseStore.removeFirst();\r\n                    if (!p.result().isError) {\r\n                        this.privList.add(p.result().result);\r\n                    } else {\r\n                        // TODO: Log as warning.\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public dequeue = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise();\r\n    }\r\n\r\n    public peek = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise();\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public drainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                return PromiseHelper\r\n                    .whenAll(this.privPromiseStore.toArray())\r\n                    .continueWith(() => {\r\n                        this.privSubscribers = null;\r\n                        this.privList.forEach((item: TItem, index: number): void => {\r\n                            pendingItemProcessor(item);\r\n                        });\r\n                        this.privList = null;\r\n                        return true;\r\n                    });\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public dispose = (reason?: string): void => {\r\n        this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain = (): void => {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose = (): void => {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n"]}