{"version":3,"sources":["src/common/Promise.ts"],"names":[],"mappings":"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","file":"Promise.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    result(): PromiseResult<T>;\r\n\r\n    continueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    continueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    on(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    state(): PromiseState;\r\n\r\n    promise(): IPromise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    }\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    }\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static whenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.resolve(true);\r\n                } else {\r\n                    deferred.reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.on((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.resolve(result);\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.reject(error);\r\n        return deferred.promise();\r\n    }\r\n}\r\n\r\n// TODO: replace with ES6 promises\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.privSink = sink;\r\n    }\r\n\r\n    public result = (): PromiseResult<T> => {\r\n        return this.privSink.result;\r\n    }\r\n\r\n    public continueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public continueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Continuation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.privSink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.on(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.privSink = new Sink<T>();\r\n        this.privPromise = new Promise<T>(this.privSink);\r\n    }\r\n\r\n    public state = (): PromiseState => {\r\n        return this.privSink.state;\r\n    }\r\n\r\n    public promise = (): Promise<T> => {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T): Deferred<T> => {\r\n        this.privSink.resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privSink.reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: Array<((result: T) => void)> = [];\r\n    private privErrorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve = (result: T): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject = (error: string): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers = (): void => {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n"]}