{"version":3,"sources":["src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"AAGA,OAAO,EAIH,eAAe,EACf,iBAAiB,EAGjB,sBAAsB,EAEtB,eAAe,EAGf,WAAW,EACX,0BAA0B,EAE1B,OAAO,EAIV,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAexC,qBAAa,uBAAuB;IAChC,OAAO,CAAC,mBAAmB,CAAkB;IAC7C,OAAO,CAAC,oBAAoB,CAA6B;IACzD,OAAO,CAAC,mBAAmB,CAAiB;IAE5C,OAAO,CAAC,oBAAoB,CAAmB;IAC/C,OAAO,CAAC,yBAAyB,CAA2B;IAC5D,OAAO,CAAC,+BAA+B,CAAmC;IAC1E,OAAO,CAAC,gCAAgC,CAAoB;IAC5D,OAAO,CAAC,sBAAsB,CAAoB;IAClD,OAAO,CAAC,oBAAoB,CAA+B;IAC3D,OAAO,CAAC,gBAAgB,CAAS;IACjC,OAAO,CAAC,OAAO,CAAS;IACxB,OAAO,CAAC,SAAS,CAAY;IAE7B,OAAc,iBAAiB,EAAE,OAAO,CAAS;gBAG7C,GAAG,EAAE,MAAM,EACX,YAAY,EAAE,MAAM,EACpB,gBAAgB,EAAE,0BAA0B,EAC5C,SAAS,EAAE,SAAS;aAkBb,KAAK,EAAI,eAAe;IAI5B,IAAI,wCAsJV;IAEM,IAAI,mDAuBV;IAEM,IAAI,mCAMV;IAEM,KAAK,wCAYX;aAEU,MAAM,EAAI,WAAW,CAAC,eAAe,CAAC;IAIjD,OAAO,CAAC,cAAc,CAarB;IAED,OAAO,CAAC,OAAO,CAad;IAED,OAAO,CAAC,gBAAgB,CAoBvB;IAED,OAAO,CAAC,OAAO,CAGd;CACJ","file":"WebsocketMessageAdapter.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport * as http from \"http\";\r\nimport * as HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as tls from \"tls\";\r\nimport * as ws from \"ws\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<boolean>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<boolean>;\r\n    private privDisconnectDeferral: Deferred<boolean>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return PromiseHelper.fromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise();\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<boolean>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve(true);\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                if (this.proxyInfo !== undefined &&\r\n                    this.proxyInfo.HostName !== undefined &&\r\n                    this.proxyInfo.Port > 0) {\r\n                    const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n                        host: this.proxyInfo.HostName,\r\n                        port: this.proxyInfo.Port,\r\n                    };\r\n\r\n                    if (undefined !== this.proxyInfo.UserName) {\r\n                        httpProxyOptions.headers = {\r\n                            \"Proxy-Authentication\": \"Basic \" + new Buffer(this.proxyInfo.UserName + \":\" + (this.proxyInfo.Password === undefined) ? \"\" : this.proxyInfo.Password).toString(\"base64\"),\r\n                            \"requestOCSP\": \"true\",\r\n                        };\r\n                    }\r\n\r\n                    const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n                    const httpsOptions: http.RequestOptions = { agent: httpProxyAgent };\r\n\r\n                    this.privWebsocketClient = new ws(this.privUri, httpsOptions as ws.ClientOptions);\r\n\r\n                    // Register to be notified when WebSocket upgrade happens so we can check the validity of the\r\n                    // Certificate.\r\n                    this.privWebsocketClient.addListener(\"upgrade\", (e: http.IncomingMessage): void => {\r\n                        const tlsSocket: tls.TLSSocket = e.socket as tls.TLSSocket;\r\n                        const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n\r\n                        // Cork the socket until we know if the cert is good.\r\n                        tlsSocket.cork();\r\n\r\n                        ocsp.check({\r\n                            cert: peer.raw,\r\n                            httpOptions: httpsOptions,\r\n                            issuer: peer.issuerCertificate.raw,\r\n                        }, (error: Error, res: any): void => {\r\n                            if (error) {\r\n                                this.privCertificateValidatedDeferral.reject(error.message);\r\n                                tlsSocket.destroy(error);\r\n                            } else {\r\n                                this.privCertificateValidatedDeferral.resolve(true);\r\n                                tlsSocket.uncork();\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                } else {\r\n                    // The ocsp library will handle validation for us and fail the connection if needed.\r\n                    this.privCertificateValidatedDeferral.resolve(true);\r\n\r\n                    const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n                    const options: ws.ClientOptions = { agent: ocspAgent };\r\n                    this.privWebsocketClient = new ws(this.privUri, options);\r\n                }\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<boolean>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue();\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise();\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise().on((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            // TODO: Understand what this is error is. Will we still get onClose ?\r\n            if (this.privConnectionState !== ConnectionState.Connecting) {\r\n                // TODO: Is this required ?\r\n                // this.onEvent(new ConnectionErrorEvent(errorMsg, connectionId));\r\n            }\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason));\r\n            } else {\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason);\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise());\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .on((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .on((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise();\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<boolean> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.fromError<boolean>(`Cannot send on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<boolean>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise());\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .on((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise();\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.fromError<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<boolean> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            const deferral = new Deferred<boolean>();\r\n            deferral.resolve(true);\r\n            return deferral.promise();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return PromiseHelper.fromResult(true);\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n            this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            return PromiseHelper.fromResult(true);\r\n        } catch (e) {\r\n            return PromiseHelper.fromError<boolean>(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private onClose = (code: number, reason: string): void => {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve(true);\r\n        this.privReceivingMessageQueue.dispose(reason);\r\n        this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private processSendQueue = (): void => {\r\n        this.privSendMessageQueue\r\n            .dequeue()\r\n            .on((sendItem: ISendItem) => {\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!sendItem) {\r\n                    return;\r\n                }\r\n\r\n                this.sendRawMessage(sendItem)\r\n                    .on((result: boolean) => {\r\n                        sendItem.sendStatusDeferral.resolve(result);\r\n                        this.processSendQueue();\r\n                    }, (sendError: string) => {\r\n                        sendItem.sendStatusDeferral.reject(sendError);\r\n                        this.processSendQueue();\r\n                    });\r\n            }, (error: string) => {\r\n                // do nothing\r\n            });\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]}