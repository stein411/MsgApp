{"version":3,"sources":["src/common.browser/FileAudioSource.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,iBAAiB,EAAyB,MAAM,uCAAuC,CAAC;AACjG,OAAO,EAEH,wBAAwB,EAE3B,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAEH,gBAAgB,EAUhB,WAAW,EACX,YAAY,EACZ,gBAAgB,EAEhB,OAAO,EAIV,MAAM,mBAAmB,CAAC;AAE3B,qBAAa,eAAgB,YAAW,YAAY;IAGhD,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAqB;IAIxD,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAA+C;IAIjF,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAkD;IAElF,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAoG;IAEtI,OAAO,CAAC,WAAW,CAA8C;IAEjE,OAAO,CAAC,MAAM,CAAS;IAEvB,OAAO,CAAC,UAAU,CAAgC;IAElD,OAAO,CAAC,QAAQ,CAAO;gBAEJ,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,EAAE,MAAM;aAM1C,MAAM,EAAI,iBAAiB;IAI/B,MAAM,yBAkBZ;IAEM,EAAE,eAER;IAEM,MAAM,qDAqBZ;IAEM,MAAM,gCAMZ;IAEM,OAAO,yBAYb;aAEU,MAAM,EAAI,WAAW,CAAC,gBAAgB,CAAC;aAIvC,UAAU,EAAI,OAAO,CAAC,wBAAwB,CAAC;IAY1D,OAAO,CAAC,MAAM,CA+Cb;IAED,OAAO,CAAC,OAAO,CAGd;CACJ","file":"FileAudioSource.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    // Recommended sample rate (bytes/second).\r\n    private static readonly SAMPLE_RATE: number = 16000 * 2; // 16 kHz * 16 bits\r\n\r\n    // We should stream audio at no faster than 2x real-time (i.e., send five chunks\r\n    // per second, with the chunk size == sample rate in bytes per second * 2 / 5).\r\n    private static readonly CHUNK_SIZE: number = FileAudioSource.SAMPLE_RATE * 2 / 5;\r\n\r\n    // 10 seconds of audio in bytes =\r\n    // sample rate (bytes/second) * 600 (seconds) + 44 (size of the wave header).\r\n    private static readonly MAX_SIZE: number = FileAudioSource.SAMPLE_RATE * 600 + 44;\r\n\r\n    private static readonly FILEFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getWaveFormatPCM(16000, 16, 1) as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privFile: File;\r\n\r\n    public constructor(file: File, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privFile = file;\r\n    }\r\n\r\n    public get format(): AudioStreamFormat {\r\n        return FileAudioSource.FILEFORMAT;\r\n    }\r\n\r\n    public turnOn = (): Promise<boolean> => {\r\n        if (typeof FileReader === \"undefined\") {\r\n            const errorMsg = \"Browser does not support FileReader.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // initialization error - no streamid at this point\r\n            return PromiseHelper.fromError<boolean>(errorMsg);\r\n        } else if (this.privFile.name.lastIndexOf(\".wav\") !== this.privFile.name.length - 4) {\r\n            const errorMsg = this.privFile.name + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return PromiseHelper.fromError<boolean>(errorMsg);\r\n        } else if (this.privFile.size > FileAudioSource.MAX_SIZE) {\r\n            const errorMsg = this.privFile.name + \" exceeds the maximum allowed file size (\" + FileAudioSource.MAX_SIZE + \").\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return PromiseHelper.fromError<boolean>(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.upload(audioNodeId).onSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: () => {\r\n                        streamReader.close();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return streamReader.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return PromiseHelper.fromResult({\r\n            bitspersample: FileAudioSource.FILEFORMAT.bitsPerSample,\r\n            channelcount: FileAudioSource.FILEFORMAT.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"File\",\r\n            samplerate: FileAudioSource.FILEFORMAT.samplesPerSec,\r\n            type: type.File,\r\n        });\r\n    }\r\n\r\n    private upload = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.turnOn()\r\n            .onSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n\r\n                this.privStreams[audioNodeId] = stream;\r\n\r\n                const reader: FileReader = new FileReader();\r\n\r\n                let startOffset = 0;\r\n                let endOffset = FileAudioSource.CHUNK_SIZE;\r\n\r\n                const processNextChunk = (event: Event): void => {\r\n                    if (stream.isClosed) {\r\n                        return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                    }\r\n\r\n                    stream.writeStreamChunk({\r\n                        buffer: reader.result as ArrayBuffer,\r\n                        isEnd: false,\r\n                        timeReceived: Date.now(),\r\n                    });\r\n\r\n                    if (endOffset < this.privFile.size) {\r\n                        startOffset = endOffset;\r\n                        endOffset = Math.min(endOffset + FileAudioSource.CHUNK_SIZE, this.privFile.size);\r\n                        const chunk = this.privFile.slice(startOffset, endOffset);\r\n                        reader.readAsArrayBuffer(chunk);\r\n                    } else {\r\n                        // we've written the entire file to the output stream, can close it now.\r\n                        stream.close();\r\n                    }\r\n                };\r\n\r\n                reader.onload = processNextChunk;\r\n\r\n                reader.onerror = (event: ProgressEvent) => {\r\n                    const errorMsg = `Error occurred while processing '${this.privFile.name}'. ${event}`;\r\n                    this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n                    throw new Error(errorMsg);\r\n                };\r\n\r\n                const chunk = this.privFile.slice(startOffset, endOffset);\r\n                reader.readAsArrayBuffer(chunk);\r\n\r\n                return stream.getReader();\r\n            });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]}