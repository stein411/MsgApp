{"version":3,"sources":["src/common.browser/MicAudioSource.ts"],"names":[],"mappings":"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","file":"MicAudioSource.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigatorUserMedia extends NavigatorUserMedia {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<boolean>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        outputChunkSize: number,\r\n        audioSourceId?: string,\r\n        private readonly deviceId?: string) {\r\n\r\n        this.privOutputChunkSize = outputChunkSize;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n    }\r\n\r\n    public get format(): AudioStreamFormat {\r\n        return MicAudioSource.AUDIOFORMAT;\r\n    }\r\n\r\n    public turnOn = (): Promise<boolean> => {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise();\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<boolean>();\r\n\r\n        this.createAudioContext();\r\n\r\n        const nav = window.navigator as INavigatorUserMedia;\r\n\r\n        let getUserMedia = (\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = () => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                getUserMedia(\r\n                    { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                    (mediaStream: MediaStream) => {\r\n                        this.privMediaStream = mediaStream;\r\n                        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                        this.privInitializeDeferral.resolve(true);\r\n                    }, (error: MediaStreamError) => {\r\n                        const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                        const tmp = this.privInitializeDeferral;\r\n                        // HACK: this should be handled through onError callbacks of all promises up the stack.\r\n                        // Unfortunately, the current implementation does not provide an easy way to reject promises\r\n                        // without a lot of code replication.\r\n                        // TODO: fix promise implementation, allow for a graceful reject chaining.\r\n                        this.privInitializeDeferral = null;\r\n                        tmp.reject(errorMsg); // this will bubble up through the whole chain of promises,\r\n                        // with each new level adding extra \"Unhandled callback error\" prefix to the error message.\r\n                        // The following line is not guaranteed to be executed.\r\n                        this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                    });\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume().then(next, (reason: any) => {\r\n                    this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\r\n                });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise();\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).onSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: () => {\r\n                        streamReader.close();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return streamReader.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        this.privInitializeDeferral = null;\r\n\r\n        this.destroyAudioContext();\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().onSuccessContinueWith((label: string) => {\r\n            return {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            };\r\n        });\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return PromiseHelper.fromResult(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return PromiseHelper.fromResult(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return PromiseHelper.fromResult(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, () => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    private listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.turnOn()\r\n            .onSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n                this.privStreams[audioNodeId] = stream;\r\n\r\n                try {\r\n                    this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n                } catch (error) {\r\n                    this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\r\n                    throw error;\r\n                }\r\n\r\n                return stream.getReader();\r\n            });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext = (): void => {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        const AudioContext = ((window as any).AudioContext)\r\n            || ((window as any).webkitAudioContext)\r\n            || false;\r\n\r\n        if (!AudioContext) {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n\r\n        this.privContext = new AudioContext();\r\n    }\r\n\r\n    private destroyAudioContext = (): void => {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            this.privContext.close();\r\n            this.privContext = null;\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n"]}