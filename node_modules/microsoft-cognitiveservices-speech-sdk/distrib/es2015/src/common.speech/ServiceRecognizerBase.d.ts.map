{"version":3,"sources":["src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":"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","file":"ServiceRecognizerBase.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudio,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n    private privAudioSource: IAudioSource;\r\n    private privSpeechServiceConfigConnectionId: string;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fethConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do no consume directly, call fetchConnection insted.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privConnectionId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privRecognizer: Recognizer;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privSpeechContext: SpeechContext;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    protected privRequestSession: RequestSession;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise) {\r\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    public recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<boolean> {\r\n\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = null;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.connectImpl();\r\n\r\n        return this.audioSource\r\n            .attach(this.privRequestSession.audioNodeId)\r\n            .continueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\r\n                let audioNode: ReplayableAudioNode;\r\n\r\n                if (result.isError) {\r\n                    this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error, successCallback);\r\n                    return PromiseHelper.fromError<boolean>(result.error);\r\n                } else {\r\n                    audioNode = new ReplayableAudioNode(result.result, this.audioSource.format as AudioStreamFormatImpl);\r\n                    this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n                }\r\n\r\n                return this.audioSource.deviceInfo.onSuccessContinueWithPromise<boolean>((deviceInfo: ISpeechConfigAudioDevice): Promise<boolean> => {\r\n                    this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n                    return this.configureConnection()\r\n                        .on((_: IConnection) => {\r\n                            const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n                            if (!!this.privRecognizer.sessionStarted) {\r\n                                this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n                            }\r\n\r\n                            const messageRetrievalPromise = this.receiveMessage(successCallback, errorCallBack);\r\n                            const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n                            /* tslint:disable:no-empty */\r\n                            audioSendPromise.on((_: boolean) => { }, (error: string) => {\r\n                                this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\r\n                            });\r\n\r\n                            const completionPromise = PromiseHelper.whenAll([messageRetrievalPromise, audioSendPromise]);\r\n\r\n                            return completionPromise.on((r: boolean) => {\r\n                                return true;\r\n                            }, (error: string) => {\r\n                                this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\r\n                            });\r\n\r\n                        }, (error: string) => {\r\n                            this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error, successCallback);\r\n                        }).continueWithPromise<boolean>((result: PromiseResult<IConnection>): Promise<boolean> => {\r\n                            if (result.isError) {\r\n                                return PromiseHelper.fromError(result.error);\r\n                            } else {\r\n                                return PromiseHelper.fromResult<boolean>(true);\r\n                            }\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    public stopRecognizing(): void {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            this.privRequestSession.onStopRecognizing();\r\n            this.sendTelemetryData();\r\n            this.audioSource.turnOff();\r\n            this.sendFinalAudio();\r\n            this.privRequestSession.dispose();\r\n        }\r\n    }\r\n\r\n    public connect(): void {\r\n        this.connectImpl().result();\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\",\r\n            undefined);\r\n\r\n        if (this.privConnectionPromise.result().isCompleted) {\r\n            if (!this.privConnectionPromise.result().isError) {\r\n                this.privConnectionPromise.result().result.dispose();\r\n                this.privConnectionPromise = null;\r\n            }\r\n        } else {\r\n            this.privConnectionPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): void;\r\n\r\n    protected sendTelemetryData = () => {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        // console.warn(\"Telem: \" + telemetryData);\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return PromiseHelper.fromResult(true);\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        return this.fetchConnection().onSuccessContinueWith((connection: IConnection): Promise<boolean> => {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"telemetry\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                telemetryData));\r\n        });\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string,\r\n        cancelRecoCallback: (r: SpeechRecognitionResult) => void): void;\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string,\r\n        cancelRecoCallback: (r: SpeechRecognitionResult) => void): void {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            this.privRequestSession.onStopRecognizing();\r\n            this.sendTelemetryData();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error,\r\n                cancelRecoCallback);\r\n        }\r\n    }\r\n\r\n    private fetchConnection = (): Promise<IConnection> => {\r\n        return this.configureConnection();\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            if (this.privConnectionPromise.result().isCompleted &&\r\n                (this.privConnectionPromise.result().isError\r\n                    || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            } else {\r\n                return this.privConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    this.privRequestSession.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    this.privRequestSession.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\r\n\r\n                this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n                        this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.connectImpl(true);\r\n                    } else {\r\n                        this.privRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configureConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\r\n                (this.privConnectionConfigurationPromise.result().isError\r\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigurationPromise = null;\r\n                return this.configureConnection();\r\n            } else {\r\n                return this.privConnectionConfigurationPromise;\r\n            }\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWithPromise((_: boolean) => {\r\n                    return this.sendSpeechContext(connection).onSuccessContinueWith((_: boolean) => {\r\n                        return connection;\r\n                    });\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    private receiveMessage = (\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<IConnection> => {\r\n        return this.fetchConnection().on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n                    if (this.privIsDisposed || !this.privRequestSession.isRecognizing) {\r\n                        // We're done.\r\n                        return PromiseHelper.fromResult(undefined);\r\n                    }\r\n\r\n                    // indicates we are draining the queue and it came with no message;\r\n                    if (!message) {\r\n                        if (!this.privRequestSession.isRecognizing) {\r\n                            return PromiseHelper.fromResult(true);\r\n                        } else {\r\n                            return this.receiveMessage(successCallback, errorCallBack);\r\n                        }\r\n                    }\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                this.privMustReportEndOfStream = true;\r\n                                break;\r\n                            case \"speech.startdetected\":\r\n                                const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                                const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechStartDetected) {\r\n                                    this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                                }\r\n\r\n                                break;\r\n                            case \"speech.enddetected\":\r\n\r\n                                let json: string;\r\n\r\n                                if (connectionMessage.textBody.length > 0) {\r\n                                    json = connectionMessage.textBody;\r\n                                } else {\r\n                                    // If the request was empty, the JSON returned is empty.\r\n                                    json = \"{ Offset: 0 }\";\r\n                                }\r\n\r\n                                const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                                // Only shrink the buffers for continuous recognition.\r\n                                // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                                if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                                    this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                                }\r\n\r\n                                const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechEndDetected) {\r\n                                    this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                this.sendTelemetryData();\r\n\r\n                                if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                                    this.privMustReportEndOfStream = false;\r\n                                    this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined, successCallback);\r\n                                }\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n\r\n                                    return PromiseHelper.fromResult(true);\r\n                                } else {\r\n                                    this.fetchConnection().onSuccessContinueWith((connection: IConnection) => {\r\n                                        this.sendSpeechContext(connection);\r\n                                    });\r\n                                }\r\n                            default:\r\n                                this.processTypeSpecificMessages(\r\n                                    connectionMessage,\r\n                                    successCallback,\r\n                                    errorCallBack);\r\n                        }\r\n                    }\r\n\r\n                    return this.receiveMessage(successCallback, errorCallBack);\r\n                });\r\n        }, (error: string) => {\r\n        });\r\n    }\r\n\r\n    private sendSpeechServiceConfig = (connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<boolean> => {\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) { // && this.privConnectionId !== this.privSpeechServiceConfigConnectionId) {\r\n            this.privSpeechServiceConfigConnectionId = this.privConnectionId;\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    private sendSpeechContext = (connection: IConnection): Promise<boolean> => {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    private sendFinalAudio(): Promise<boolean> {\r\n        const deferred = new Deferred<boolean>();\r\n\r\n        this.fetchConnection().on((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null)).on((_: boolean) => {\r\n                deferred.resolve(true);\r\n            }, (error: string) => {\r\n                deferred.reject(error);\r\n            });\r\n        }, (error: string) => {\r\n            deferred.reject(error);\r\n        });\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    private sendAudio = (\r\n        audioStreamNode: IAudioStreamNode): Promise<boolean> => {\r\n        // NOTE: Home-baked promises crash ios safari during the invocation\r\n        // of the error callback chain (looks like the recursion is way too deep, and\r\n        // it blows up the stack). The following construct is a stop-gap that does not\r\n        // bubble the error up the callback chain and hence circumvents this problem.\r\n        // TODO: rewrite with ES6 promises.\r\n        const deferred = new Deferred<boolean>();\r\n\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        const audioFormat: AudioStreamFormatImpl = this.privAudioSource.format as AudioStreamFormatImpl;\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = () => {\r\n\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n                this.fetchConnection().on((connection: IConnection) => {\r\n                    audioStreamNode.read().on(\r\n                        (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                            // we have a new audio chunk to upload.\r\n                            if (this.privRequestSession.isSpeechEnded) {\r\n                                // If service already recognized audio end then don't send any more audio\r\n                                deferred.resolve(true);\r\n                                return;\r\n                            }\r\n\r\n                            let payload: ArrayBuffer;\r\n                            let sendDelay: number;\r\n\r\n                            if (audioStreamChunk.isEnd) {\r\n                                payload = null;\r\n                                sendDelay = 0;\r\n                            } else {\r\n                                payload = audioStreamChunk.buffer;\r\n                                this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                                if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                                    sendDelay = 0;\r\n                                } else {\r\n                                    sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                                }\r\n                            }\r\n\r\n                            // Are we ready to send, or need we delay more?\r\n                            setTimeout(() => {\r\n                                if (payload !== null) {\r\n                                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                                }\r\n\r\n                                const uploaded: Promise<boolean> = connection.send(\r\n                                    new SpeechConnectionMessage(\r\n                                        MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload));\r\n\r\n                                if (!audioStreamChunk.isEnd) {\r\n                                    uploaded.continueWith((_: PromiseResult<boolean>) => {\r\n\r\n                                        // Regardless of success or failure, schedule the next upload.\r\n                                        // If the underlying connection was broken, the next cycle will\r\n                                        // get a new connection and re-transmit missing audio automatically.\r\n                                        readAndUploadCycle();\r\n                                    });\r\n                                } else {\r\n                                    // the audio stream has been closed, no need to schedule next\r\n                                    // read-upload cycle.\r\n                                    this.privRequestSession.onSpeechEnded();\r\n                                    deferred.resolve(true);\r\n                                }\r\n                            }, sendDelay);\r\n                        },\r\n                        (error: string) => {\r\n                            if (this.privRequestSession.isSpeechEnded) {\r\n                                // For whatever reason, Reject is used to remove queue subscribers inside\r\n                                // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\r\n                                // means that sometimes things can be rejected in normal circumstances, without\r\n                                // any errors.\r\n                                deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                            } else {\r\n                                // Only reject, if there was a proper error.\r\n                                deferred.reject(error);\r\n                            }\r\n                        });\r\n                }, (error: string) => {\r\n                    deferred.reject(error);\r\n                });\r\n            }\r\n        };\r\n\r\n        readAndUploadCycle();\r\n\r\n        return deferred.promise();\r\n    }\r\n}\r\n"]}